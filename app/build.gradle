apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: "com.github.dcendents.android-maven"

group = 'com.isupatches'
version = '1.0.4'

def coverageSourceDirs = [
        '../app/src/main/java'
]

def classDirs = fileTree(
        dir: '../app/build/intermediates/classes/debug/com/',
        excludes: ['**/R.class',
                   '**/R$*.class',
                   '**/*$ViewBinder*.*',
                   '**/*MembersInjector*.*',
                   '**/BuildConfig.*',
                   '**/Manifest*.*',
                   '**/*$Lambda$*.class',
                   '**/*Factory*.class',
                   '**/*$Builder*'])

task jacocoDebugTestReport(type: JacocoReport, dependsOn: ["connectedDebugAndroidTest"]) {
    group = "Reporting"
    description = "Generate Jacoco coverage report for debug tests"
    classDirectories = classDirs
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files([fileTree(dir: 'build/outputs/code-coverage/connected', include: '**/*.ec')])

    onlyIf = {
        true
    }

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

dexcount {
    format = "tree"
    includeClasses = true
    includeFieldCount = true
    includeTotalMethodCount = true
    orderByMethodCount = true
    verbose = false
}

android {

    testOptions {
        // Allows Android code to be called from unit tests without causing a crash.
        // Helpful for allowing Log.d()-type calls
        unitTests.returnDefaultValues = true;
    }

    compileSdkVersion 24
    buildToolsVersion "24.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 5
        versionName version
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.2.1'
    androidTestCompile 'com.android.support:support-annotations:24.2.1'

    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'

    testCompile 'junit:junit:4.12'
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                artifactId 'wisefy'
                packaging 'aar'

                name 'WiseFy'
                url 'https://github.com/isuPatches/WiseFy'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'isuPatches'
                        name 'Sarah Klinefelter'
                        email 'isuPatches@yahoo.com'
                    }
                }
                scm {
                    connection 'https://github.com/isuPatches/WiseFy.git'
                    developerConnection 'https://github.com/isuPatches/WiseFy.git'
                    url 'https://github.com/isuPatches/WiseFy'
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../javadoc/")
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
